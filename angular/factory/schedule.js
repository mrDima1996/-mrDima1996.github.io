/**
 * Created by mrDima on 28.01.2016.
 */

//этот модуль необходим для всех расчетов относительно отображения событий на расписании
//Сюда входят:
//-расчет высоты события, в зависимости от его продолжительности
//-И составление очередности событий, исходя из их номеров.
angular.module('app')
    .factory('schedule', ['data', function(data){
        //вот тут я получаю стандартную высоту события на один час.
        // Так как оно может быть изменено я решил динамически подгружать его из стилей
        var basicH = parseInt(getComputedStyle(document.getElementsByClassName('timeContainer')[0]).marginBottom)+20;
        if (basicH === undefined) {basicH = 70; alert('Высота блока не определена. Выставленно значение по умолчанию')};
        var footerInitialTop;

        /**
         *
         * @param duration - {number}
         * @returns {number}
         */
        function getHeight(duration){
            return duration*basicH;
        }

        /**
         * функция расчитывает расписания дня (где есть событие, а где - пустое место)
         * @param eventNumb {Array} - массив с номерами событий в этот день
         * @returns {Array}
         */
        function createSchedule(eventNumb){
            //берем данные о времени событий (начало, продолжительность, конец)
            var dayEvents = [];
            var singleEventNumb;
            for (var event in  eventNumb){
                singleEventNumb = eventNumb[event]; //номер события
                dayEvents.push({eNumber: singleEventNumb, timeData: data.getEventTimeData(singleEventNumb)})
            }
            singleEventNumb = '';

            //сортируем события в порядке возрастания времени начала
            dayEvents.sort(function(a, b) {
                if(a.timeData.begin == b.timeData.begin) return 0;
                if(a.timeData.begin > b.timeData.begin) return 1;
                if(a.timeData.begin < b.timeData.begin) return -1;
                return 0; // o_O в независимости от других свойств считаем что объекты равны
            });

            var singleEvent;
            var pointer = 0;

            var schedule = []; //собственно, расписание
            //оно должно иметь столько элементов, сколько потенциальных "tr" в таблице
            // и он должен содержать длительность каждого элемента, чтобы я смог высчитать его высоту


            for (event in dayEvents){
                singleEvent = dayEvents[parseInt(event)]; //событие

                if (pointer != singleEvent.timeData.begin) { //если указатель не совпадает с началом очередного события...
                    //...то мы вставляем пустое поле до самого начала очередного события
                    schedule.push({event: 0, duration: dayEvents[parseInt(event)].timeData.begin-pointer});
                    pointer = dayEvents[parseInt(event)].timeData.begin;

                    // и добавляем само событие
                    schedule.push({event: singleEvent.eNumber, duration: singleEvent.timeData.duration});
                    pointer = singleEvent.timeData.end;
                }else {
                    // ... то добавить его "как есть"
                    schedule.push({event: singleEvent.eNumber, duration: singleEvent.timeData.duration});
                    pointer = singleEvent.timeData.end;
                }
            }
            if (pointer<24) schedule.push({event: 0, duration: 24-pointer});
            pointer = null;
            singleEvent = null;

            return schedule;
        }
        return {
            //получить высоту блока события
            getHeight: getHeight,
            //Создать очередность пустных и заполненных событий для корректного расмещения
            createSchedule:createSchedule
        }
    }]);